version: '3.8'

services:
  # Main MTS Application
  mts-pipeline:
    build: .
    container_name: mts-pipeline
    restart: unless-stopped
    ports:
      - "8000:8000"  # API port
      - "8001:8001"  # Metrics port
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_PATH=/app/data/crypto_data.db
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - METRICS_PORT=8001
      - ENABLE_METRICS=true
      - COINGECKO_BASE_URL=https://api.coingecko.com/api/v3
      - FRED_API_KEY=${FRED_API_KEY}
      - API_SECRET_KEY=${API_SECRET_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
    networks:
      - mts-network
    command: ["python3", "production_main.py", "--mode", "full"]

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: mts-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mts-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: mts-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mts-pipeline
    networks:
      - mts-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mts-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mts-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mts-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - mts-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  mts-network:
    driver: bridge 